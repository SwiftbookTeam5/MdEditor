//
//  MainInteractor.swift
//  MdEditor
//
//  Created by Александра Рязанова on 01.02.2024.
//  Copyright (c) 2024 SwiftbookTeam5. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol IMainInteractor {

	/// Событие на предоставление информации о файлах и действиях
	func fetchData()

	/// Событие, что действие было выбрано.
	/// - Parameter request: Запрос, содержащий информацию о выбранном действие.
	func didActionSelected(request: MainModel.Request.ItemSelected)

	/// Событие, что файл был выбран.
	/// - Parameter request: Запрос, содержащий информацию о выбранном файле.
	func didFileSelected(request: MainModel.Request.ItemSelected)
}

final class MainInteractor: IMainInteractor {

	// MARK: - Dependencies

	private var presenter: IMainPresenter
	private let fileRepository: IFileRepository

	// MARK: - Initialization

	init(presenter: IMainPresenter, fileRepository: IFileRepository) {
		self.presenter = presenter
		self.fileRepository = fileRepository
	}

	// MARK: - Internal methods

	/// Событие на предоставление информации о файлах и действиях
	func fetchData() {
		let actions = MainModel.Response.Action.create()
		let files = mapFilesData(files: fileRepository.getFiles())

		let response = MainModel.Response(files: files, actions: actions)
		presenter.present(response: response)
	}

	/// Событие, что действие было выбрано.
	/// - Parameter request: Запрос, содержащий информацию о выбранном действие.
	func didActionSelected(request: MainModel.Request.ItemSelected) {
		//
	}

	/// Событие, что файл был выбран.
	/// - Parameter request: Запрос, содержащий информацию о выбранном файле.
	func didFileSelected(request: MainModel.Request.ItemSelected) {
		//
	}
}

// MARK: - Private methods

private extension MainInteractor {

	/// Мапинг файлов для бизнес-модели
	/// - Parameter files: Файлы для преобразования.
	/// - Returns: Преобразованный результат.
	func mapFilesData(files: [File]) -> [MainModel.Response.File] {
		files.map { mapFileData(file: $0) }
	}

	/// Мапинг файлов для бизнес-модели
	/// - Parameter file: Файл для преобразования.
	/// - Returns: Преобразованный результат.
	func mapFileData(file: File) -> MainModel.Response.File {
		let color = file.modifiationData > file.creationDate ? FlatColor.Green.Fern : FlatColor.Orange.NeonCarrot

		let response = MainModel.Response.File(
			title: file.name,
			color: color
		)

		return response
	}
}

// MARK: - Action private methods

fileprivate extension MainModel.Response.Action {

	static func create() -> [MainModel.Response.Action] {
		[
			MainModel.Response.Action(title: L10n.Main.Actions.new, image: Asset.Icons.file.image),
			MainModel.Response.Action(title: L10n.Main.Actions.open, image: Asset.Icons.folder.image),
			MainModel.Response.Action(title: L10n.Main.Actions.about, image: Asset.Icons.about.image)
		]
	}
}
