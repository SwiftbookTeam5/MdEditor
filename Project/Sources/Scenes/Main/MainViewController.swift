//
//  MainViewController.swift
//  MdEditor
//
//  Created by Александра Рязанова on 01.02.2024.
//  Copyright (c) 2024 SwiftbookTeam5. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol IMainViewController: AnyObject {

	/// Метод отрисовки информации на экране.
	/// - Parameter viewModel: данные для отрисовки на экране.
	func render(viewModel: MainModel.ViewModel)
}

final class MainViewController: UICollectionViewController {

	// MARK: - Dependencies

	var interactor: IMainInteractor?

	// MARK: - Private properties

	private let layout = MainCompositionalLayout()
	private var viewModel = MainModel.ViewModel(sections: [])

	private lazy var folderImage = makeFolderImage()
	private lazy var fileImage = makeFileImage()
	private lazy var aboutImage = makeAboutImage()

	// MARK: - Lifecycle

	override func viewDidLoad() {
		super.viewDidLoad()

		setupUI()
	}

	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)

		interactor?.fetchData()
	}
}

// MARK: - UICollectionViewDataSource

extension MainViewController {

	override func numberOfSections(in collectionView: UICollectionView) -> Int {
		viewModel.sections.count
	}

	override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		viewModel.sections[section].items.count
	}

	override func collectionView(
		_ collectionView: UICollectionView,
		cellForItemAt indexPath: IndexPath
	) -> UICollectionViewCell {
		let item = getItemForIndex(indexPath)

		switch item {
		case .file(let file):
			let cell: FileCollectionViewCell = collectionView.dequeueReusableCell(for: indexPath)
			cell.configure(title: file.fileName, color: FlatColor.Green.Fern)

			cell.accessibilityIdentifier = AccessibilityIdentifier.Main.cell(
				section: indexPath.section,
				index: indexPath.row
			).description

			return cell
		case .menu(let menuItem):
			let cell: UICollectionViewCell = collectionView.dequeueReusableCell(for: indexPath)

			switch menuItem.item {
			case .openFile:
				configureCell(cell, title: menuItem.title, icon: folderImage)
			case .newFile:
				configureCell(cell, title: menuItem.title, icon: fileImage)
			case .showAbout:
				configureCell(cell, title: menuItem.title, icon: aboutImage)
			}

			cell.accessibilityIdentifier = AccessibilityIdentifier.Main.cell(
				section: indexPath.section,
				index: indexPath.row
			).description

			return cell
		}
	}

	override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
		let item = getItemForIndex(indexPath)

		switch item {
		case .file:
			interactor?.performAction(request: .recentFileSelected(indexPath: indexPath))
		case .menu:
			interactor?.performAction(request: .menuItemSelected(indexPath: indexPath))
		}
	}
}

// MARK: - IMainViewController

extension MainViewController: IMainViewController {

	/// Метод отрисовки информации на экране.
	/// - Parameter viewModel: данные для отрисовки на экране.
	func render(viewModel: MainModel.ViewModel) {
		self.viewModel = viewModel

		layout.sections = viewModel.sections
		collectionView.reloadData()
	}
}

// MARK: - UI setup

private extension MainViewController {

	func setupUI() {
		view.backgroundColor = Theme.backgroundColor

		title = L10n.Main.title
		navigationItem.setHidesBackButton(true, animated: true)

		setupCollectionView()
	}

	func setupCollectionView() {
		collectionView.accessibilityIdentifier = AccessibilityIdentifier.Main.collectionView.description
		collectionView.register(UICollectionViewCell.self)
		collectionView.register(FileCollectionViewCell.self)
		collectionView.setCollectionViewLayout(layout.layout, animated: true)
	}

	func configureCell(_ cell: UICollectionViewCell, title: String, icon: UIImage) {
		var contentConfiguration = UIListContentConfiguration.valueCell()
		contentConfiguration.textProperties.font = UIFont.preferredFont(forTextStyle: .headline)
		contentConfiguration.secondaryTextProperties.adjustsFontForContentSizeCategory = true
		contentConfiguration.image = icon

		let attributes = [NSAttributedString.Key.foregroundColor: FlatColor.Gray.IronGray]
		let attributedString = NSMutableAttributedString(string: title, attributes: attributes)
		contentConfiguration.attributedText = attributedString

		cell.contentConfiguration = contentConfiguration
	}

	func getItemForIndex(_ indexPath: IndexPath) -> MainModel.ViewModel.Item {
		let section = viewModel.sections[indexPath.section]
		let item = section.items[indexPath.item]

		return item
	}

	func makeFolderImage() -> UIImage {
		Asset.Icons.openFolder.image.withTintColor(
			Theme.mainColor,
			renderingMode: .alwaysOriginal
		)
	}

	func makeFileImage() -> UIImage {
		Asset.Icons.file.image.withTintColor(
			Theme.mainColor,
			renderingMode: .alwaysOriginal
		)
	}

	func makeAboutImage() -> UIImage {
		Asset.Icons.about.image.withTintColor(
			Theme.mainColor,
			renderingMode: .alwaysOriginal
		)
	}
}
