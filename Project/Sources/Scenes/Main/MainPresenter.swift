//
//  MainPresenter.swift
//  MdEditor
//
//  Created by Александра Рязанова on 01.02.2024.
//  Copyright (c) 2024 SwiftbookTeam5. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol IMainPresenter {

	/// Отображение экрана со списком файлов и действий.
	/// - Parameter response: Подготовленные к отображению данные.
	func present(response: MainModel.Response)

	/// Отображение экрана со списком файлов директирии документов
	func presentFiles()

	/// Отображение экрана c информацией о преложении
	func presentAbout()
}

final class MainPresenter: IMainPresenter {

	// MARK: - Dependencies

	private weak var viewController: IMainViewController! // swiftlint:disable:this implicitly_unwrapped_optional
	private var openFileClosure: EmptyClosure?
	private var openAboutClosure: EmptyClosure?

	// MARK: - Initialization

	init(viewController: IMainViewController, openFileClosure: EmptyClosure?, openAboutClosure: EmptyClosure?) {
		self.viewController = viewController
		self.openFileClosure = openFileClosure
		self.openAboutClosure = openAboutClosure
	}

	// MARK: - Internal methods

	/// Отображение экрана со списком файлов и действий.
	/// - Parameter response: Подготовленные к отображению данные.
	func present(response: MainModel.Response) {
		let sections = [
			MainModel.ViewModel.Section(
				type: .horizontal,
				items: mapFilesData(files: response.files)
			),
			MainModel.ViewModel.Section(
				type: .vertical,
				items: mapActionsData(actions: response.actions)
			)
		]

		viewController.render(viewModel: MainModel.ViewModel(sections: sections))
	}

	/// Открывает список файлов
	func presentFiles() {
		openFileClosure?()
	}

	/// Отображение экрана c информацией о преложении
	func presentAbout() {
		openAboutClosure?()
	}
}

// MARK: - Private methods

private extension MainPresenter {

	/// Мапинг файлов из бизнес-модели в файлы для отображения
	/// - Parameter files: Файлы для преобразования.
	/// - Returns: Преобразованный результат.
	func mapFilesData(files: [MainModel.Response.File]) -> [MainModel.ViewModel.Item] {
		files.map { mapFileData(file: $0) }
	}

	/// Мапинг одного файла из бизнес-модели в файл для отображения
	/// - Parameter file: Файл для преобразования.
	/// - Returns: Преобразованный результат.
	func mapFileData(file: MainModel.Response.File) -> MainModel.ViewModel.Item {
		MainModel.ViewModel.Item.file(MainModel.ViewModel.File(title: file.title, color: file.color))
	}

	/// Мапинг действий из бизнес-модели в действия для отображения
	/// - Parameter actions: Действия для преобразования.
	/// - Returns: Преобразованный результат.
	func mapActionsData(actions: [MainModel.Response.Action]) -> [MainModel.ViewModel.Item] {
		actions.map { mapActionData(action: $0) }
	}

	/// Мапинг одного действия из бизнес-модели в действие для отображения
	/// - Parameter task: Действие для преобразования.
	/// - Returns: Преобразованный результат.
	func mapActionData(action: MainModel.Response.Action) -> MainModel.ViewModel.Item {
		MainModel.ViewModel.Item.action(MainModel.ViewModel.Action(title: action.title, image: action.image))
	}
}
